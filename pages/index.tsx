import Head from 'next/head';

import styles from '@/styles/Home.module.css';
import { Button, Container, FormControl, FormControlLabel, FormLabel, Radio, RadioGroup, Typography } from '@mui/material';
import { ChangeEvent, useEffect, useState } from 'react';
import { getRandomQuestion, Question } from '@/utility/ManageQuestions';
import { Done, Error, Send } from '@mui/icons-material';
import { FadeLoader } from 'react-spinners';
import MoonLoader from 'react-spinners/MoonLoader';
import PulseLoader from 'react-spinners/PulseLoader';

export default function Home() {
	type AnswerStatus = 'CORRECT' | 'INCORRECT' | 'PENDING';

	const [question, setQuestion] = useState<Question>();
	const [answerStatus, setAnswerStatus] = useState<AnswerStatus>('PENDING');
	const [chosenAnswer, setChosenAnswer] = useState<string>('');

	const handleConfirm = () => {
		if (chosenAnswer == '') return;

		if (chosenAnswer == question?.correctAnswer) {
			setAnswerStatus('CORRECT');
		} else if (chosenAnswer != question?.correctAnswer && chosenAnswer != '') {
			setAnswerStatus('INCORRECT');
		}

		setTimeout(() => {
			getNewQuestion();
		}, 2200);
	};

	const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
		setChosenAnswer(event.target.value);
	};

	const buttonColor = answerStatus == 'CORRECT' ? 'success' : answerStatus == 'INCORRECT' ? 'error' : 'primary';
	const buttonText = answerStatus == 'CORRECT' ? 'Resposta Certa' : answerStatus == 'INCORRECT' ? 'Resposta errada' : 'Confirmar';
	const buttonIcon = answerStatus == 'CORRECT' ? <Done /> : answerStatus == 'INCORRECT' ? <Error /> : <Send />;

	const getNewQuestion = async () => {
		let newQuestion = await getRandomQuestion();

		if (newQuestion.id != question?.id) {
			setQuestion(newQuestion);
		} else {
			getNewQuestion();
		}
		setChosenAnswer('');
		setAnswerStatus('PENDING');
	};

	useEffect(() => {
		getNewQuestion();
	}, []);

	if (typeof question == 'undefined') {
		return <h1>Carregando</h1>;
	}

	let possibleAnswers = [question?.correctAnswer, ...question?.wrongAnswers];

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<div className={styles.indexContainer}>
					<Container maxWidth="lg">
						<div className={styles.questionAndAnswersContainer}>
							<Typography>
								<b>Categoria:</b> {question?.category}
							</Typography>
							<Typography fontSize={'24px'} gutterBottom>
								<b>Pergunta:</b> {question?.question}
							</Typography>
							<FormControl component="fieldset">
								<FormLabel component="legend">Selecione a resposta:</FormLabel>
								<RadioGroup value={chosenAnswer} onChange={handleChange}>
									{possibleAnswers.map((answer, index) => (
										<FormControlLabel key={index} value={answer} control={<Radio />} label={`${answer}`} />
									))}
								</RadioGroup>
							</FormControl>
						</div>

						<div>
							<Button variant="outlined" onClick={handleConfirm} color={buttonColor} endIcon={buttonIcon}>
								{buttonText}
							</Button>
							<Button variant="outlined" onClick={getNewQuestion} sx={{ marginLeft: '12px' }}>
								Pr√≥xima
							</Button>
							<div className={styles.fadeLoader}>{answerStatus != 'PENDING' && <PulseLoader size={10} color="black" />}</div>
						</div>
					</Container>
				</div>
			</main>
		</>
	);
}
